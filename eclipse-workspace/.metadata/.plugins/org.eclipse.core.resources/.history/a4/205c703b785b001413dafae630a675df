package com.iparadigms.ipgrammar;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.languagetool.JLanguageTool;
import org.languagetool.Language;
import org.languagetool.language.BritishEnglish;
import org.languagetool.rules.Rule;
import org.languagetool.rules.en.EnglishPatternRuleTest;
import org.languagetool.rules.RuleMatch;
import org.languagetool.rules.patterns.PatternRuleLoader;
import org.languagetool.rules.patterns.PatternRule;
import org.languagetool.rules.patterns.PatternRuleTest;
import org.languagetool.tools.RuleAsXmlSerializer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.logging.Logger;
import java.util.logging.Level;

import com.iparadigms.ipgrammar.VerbConjugationRule;

public class RuleTestServlet extends HttpServlet{
    
    private final boolean testEachIPRule = false;
    private final boolean testProcessingTime = false;
    
    private final int CONTEXT_SIZE = 40; // characters
    private final String RULES_FILENAME = "MyRules.xml";
    private final String CORPUS_FILENAME = "_tatoeba_corpus.txt";
    private final String RESOURCES_DIR = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/";
    private final Logger LOG = Logger.getLogger(RuleTestServlet.class.getName());
    private Language _lang;
    private JLanguageTool _langTool;
    private List<String> ruleIdsIP = new ArrayList<String>();
    private CorpusTextHolder _engCorpus;

    public RuleTestServlet() throws InstantiationException, IllegalAccessException, IOException{
        _lang = Language.getLanguageForShortName("en-GB").getClass().newInstance();
        _lang.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(true);
        _langTool = new JLanguageTool(_lang);  
        
        //Add IP rules, record their IDs, then disable them
        PatternRuleLoader ruleLoader = new PatternRuleLoader();
        List<PatternRule> myRules = ruleLoader.getRules(
            TextEngineServlet.class.getResourceAsStream(RULES_FILENAME), RULES_FILENAME);
        for (PatternRule r : myRules) {
            _langTool.addRule(r);
            ruleIdsIP.add(r.getId());
            /*_langTool.disableRules(ruleIdsIP);*/
        }
        
        //IP Java rules
        //_langTool.addRule(new VerbConjugationRule());
        
        //Default rules
        _langTool.activateDefaultPatternRules();
        
        //Disable default rules
        /*List<String> builtInRuleIds = new ArrayList<String>();
        List<Rule> builtInRules = _langTool.getAllActiveRules();
        for (Rule r : builtInRules)
            builtInRuleIds.add(r.getId());
        _langTool.disableRules(builtInRuleIds);*/
    }
    
    @Override
    public void doGet (HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
        resp.getWriter().print(
            testingRules(
                req.getParameter("langcode"),
                req.getParameter("ruleid"), 
                Integer.parseInt(req.getParameter("corpuslinelimit"))
            )
        );
    }
    
    private String testingRules (String langCode, String ruleId, int lineLimit) throws IOException {
        
        _engCorpus = new CorpusTextHolder (langCode, 20000);
        lineLimit = lineLimit == 0 ? 20000 : lineLimit;
        
        if (testProcessingTime) {
            return testRulesProcessTime();
        } else {
            if (testEachIPRule)
                return testEachIPRule();
            else
                return testIPRule(ruleId, lineLimit);
        }
    }
    
    private String testIPRule(String ruleId, int lineLimit) {
        disableAllActiveRules();
        
        if (ruleId.equals("###")) {
            for (String ruleID : ruleIdsIP)
                _langTool.enableRule(ruleID);
        } else
            _langTool.enableRule(ruleId);
        
        RuleAsXmlSerializer serializer = new RuleAsXmlSerializer();
        String xmlResponse = serializer.ruleMatchesToXml(matches, _engCorpus.getLinesToString(lineLimit), CONTEXT_SIZE, _lang);
        return xmlResponse;
    }
    
    private String testRulesProcessTime () throws IOException {
        String formattedString = "";
        String corpusText = _engCorpus.getLinesToString(1000);
        List<RuleMatch> matches = _langTool.check(corpusText);
        
        for (int x = 1; x <= 60; x++) {
            corpusText = _engCorpus.getLinesToString(x*1000);
            
            writeLog("LOOP NUMBER : " + x);
            if (x != 1)
                formattedString += "\n";
            long startTime = System.nanoTime();
            //TODO : Always getting the same number of matches
            matches = _langTool.check(corpusText);
            double timeElapsed = (double)((System.nanoTime() - startTime)/1000000000.0);
            
            //[line limit], [rules used],   [number of matches],    [rule time].
            formattedString += x*1000 + ",\t" + _langTool.getAllActiveRules().size()
                    + ",\t" + matches.size() + ",\t" + timeElapsed;
        }
        
        return formattedString;
    }
    
    private String testEachIPRule () throws IOException {
writeLog("TESTING EACH IP RULE");
        String corpusText = _engCorpus.getLinesToString(1000);
        disableAllActiveRules();
        
        String returnText = "";
        int matchesCount = 0;
        
        for (int x = 0; ruleIdsIP.size() > x; x++) {
writeLog("TESTING IP RULE " + x + " of " + ruleIdsIP.size());
            _langTool.enableRule(ruleIdsIP.get(x));
            if (x != 0)
                _langTool.disableRule(ruleIdsIP.get(x-1));
            
            //Testing rules against corpus
            List<RuleMatch> matches = _langTool.check(corpusText);
            
            //Developing output
            matchesCount += matches.size();
            returnText += ruleIdsIP.get(x) + ", \t" + matches.size() + "\n";
        }
        returnText += "##########################\nRules checked : " + ruleIdsIP.size() + "\tTotal number of matches : " + matchesCount;
        return returnText;
    }
    
    public void disableAllActiveRules () {
        List<Rule> myRules = _langTool.getAllActiveRules();
        List<String> myRuleIds = new ArrayList<String>();
        
        for (Rule r : myRules)
            myRuleIds.add(r.getId());        
            
        _langTool.disableRules(myRuleIds);
    }
    
    private void writeLog(String text){
        LOG.log(Level.INFO, text);
    }
}
