package com.iparadigms.ipgrammar;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.languagetool.JLanguageTool;
import org.languagetool.Language;
import org.languagetool.language.BritishEnglish;
import org.languagetool.rules.en.EnglishPatternRuleTest;
import org.languagetool.rules.RuleMatch;
import org.languagetool.rules.patterns.PatternRuleLoader;
import org.languagetool.rules.patterns.PatternRule;
import org.languagetool.rules.patterns.PatternRuleTest;
import org.languagetool.tools.RuleAsXmlSerializer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.logging.Logger;
import java.util.logging.Level;

import com.iparadigms.ipgrammar.VerbConjugationRule;

public class RuleTestServlet extends HttpServlet{

    private final int CONTEXT_SIZE = 40; // characters
    private final String RULES_FILENAME = "MyRules.xml";
    private final String CORPUS_FILENAME = "corpus.txt";
    private final Logger LOG = Logger.getLogger(RuleTestServlet.class.getName());
    private Language _lang;
    private JLanguageTool _langTool;
    private List<PatternRule> _myRules;

    public RuleTestServlet() throws InstantiationException, IllegalAccessException, IOException{
        _lang = Language.getLanguageForShortName("en-GB").getClass().newInstance();
        _langTool = new JLanguageTool(_lang);  
    }
    
    @Override
    public void doGet (HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
        //TODO: read text from corpus file
        resp.getWriter().print( testRule(req.getParameter("ruleid"), loadCorpusText(CORPUS_FILENAME) ));
    }
    
    private String loadCorpusText(String fileName){
            
            String line = null;
            String all = "";
            
            try{
                BufferedReader reader = new BufferedReader(new InputStreamReader(
                    VerbTool.class.getResourceAsStream(fileName)));
                while ((line = reader.readLine()) != null) {
                    if(line.split("\t")[1].equals("eng"))
                        all += line.split("\t")[2];
                }
                reader.close();
            }catch(IOException ex){
                 System.out.println(ex.getMessage());
            }

            return all;
    }
    
    public String testRule(String ruleId, String text) throws IOException{
        //Load one rule
        try {
            PatternRuleLoader ruleLoader = new PatternRuleLoader();
            _myRules = ruleLoader.getRules(
                TextEngineServlet.class.getResourceAsStream(RULES_FILENAME), RULES_FILENAME);
            for (PatternRule r : _myRules) {
                if(r.getId().equals(ruleId))
                    _langTool.addRule(r);
            }
        }catch (NullPointerException ex) { LOG.log(Level.INFO, ex.toString()); }
        
        List<RuleMatch> matches = _langTool.check(text);
writeLog( "TEST RULE RESULT - Number of matches: " + matches.size() );
        final RuleAsXmlSerializer serializer = new RuleAsXmlSerializer();
        final String xmlResponse = serializer.ruleMatchesToXml(matches, text, CONTEXT_SIZE, _lang);
        return xmlResponse;
        
    }
    
    private void writeLog(String text){
        LOG.log(Level.INFO, text);
    }
}
