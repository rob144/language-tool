package com.iparadigms.ipgrammar;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import morfologik.tools.FSADumpTool;

import org.languagetool.JLanguageTool;
import org.languagetool.Language;
import org.languagetool.language.English;
import org.languagetool.tagging.en.EnglishTagger;
import org.languagetool.dev.POSDictionaryBuilder;

public class UnitTests {

    private Language _lang;
    private JLanguageTool _langTool;
    private String _resourcesDir = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/";
    private String _pathToBinaryDict = _resourcesDir + "english.dict";
    private String _pathToTextDict = _resourcesDir + "dictionary.dump";
    private String _pathToInfoFile = _resourcesDir + "english.info";
    
    public UnitTests() throws Exception{
        if (testSetDictionaryFileName())
            System.out.println("Unit tests succeeded");
        else
            System.out.println("Unit tests failed");
    }
    
    public boolean dumpDictionaryToMemory() throws Exception {
        PrintStream old = System.out;
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        System.setOut(ps);
        
        FSADumpTool.main("--raw-data", "-d", _pathToBinaryDict);
        System.out.flush();
        System.setOut(old);
        
        String[] lineArray = baos.toString().split("\n");
        String[][] multiArray = new String[lineArray.length][];
        for (int x = 0; x < lineArray.length; x++)
            multiArray[x] = lineArray[x].split("\\+");
        
        if (multiArray.length > 2)
            return true;
        else
            return false;
    }
    
    public boolean testSetDictionaryFileName() throws Exception {
        //_lang = Language.getLanguageForShortName("en-GB").getClass().newInstance();
        _lang = new IPEnglish();
        _lang.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(true);
        
        EnglishTagger tagger = (EnglishTagger) _langTool.getLanguage().getTagger();
        System.out.println("Tagger dictionary path: " + tagger.getFileName());
        tagger.setFileName("/whatever");
        
        _langTool = new JLanguageTool(_lang);
        
        if (tagger.getFileName().equals("/whatever"))
            return true;
        else
            return false;
    }
    
    public boolean testDictionaryDump() throws Exception {
        String cmd_dict = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/test/cmd_english.dict";
        String cmd_dump = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/test/cmd_dictionary.dump";
        String dump = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/test/dictionary.dump";
        
System.out.println("TESTING DICTIONARY DUMPING PROCESS");
        PrintStream old = System.out;
        
        ByteArrayOutputStream corpusDumpText = new ByteArrayOutputStream();
        PrintStream writeCorpusDump = new PrintStream(corpusDumpText);
        System.setOut(writeCorpusDump);
        
        FSADumpTool.main("--raw-data", "-x", "-d", cmd_dict);
        System.out.flush();
        System.setOut(old);
        writeCorpusDump.close();
        
        FileWriter write = new FileWriter(dump, false);
        PrintWriter printLine = new PrintWriter(write);
        
        printLine.print(corpusDumpText.toString());
        
        printLine.close();
        write.close();
        
        return compareFiles(cmd_dump, dump);
    }
    
    public boolean testPosDictionaryBuilder() throws Exception {
        String dict = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/test/cmd_english.dict";
        String dict2 = "grammar-webapp/src/com/iparadigms/ipgrammar/resources/test/cmd_built_english.dict";
        //build .dict from cmd line manual dump
        //build .dict from java software
        //compare both
        return compareFiles(dict, dict2);
    }
    
    public boolean testDictionaryAddingWords() throws Exception {
        //load cmd line dump into memory
        //add words in memory
        //dump it
        //somehow check it works?
        return false;
    }
    
    private boolean compareFiles(String filePathOne, String filePathTwo) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        try (InputStream is = Files.newInputStream(Paths.get(filePathOne))) {
          DigestInputStream dis = new DigestInputStream(is, md);
          /* Read stream to EOF as normal... */
          while(dis.read()!= -1);
          dis.close();
        }
        byte[] digest = md.digest();
        
        MessageDigest md2 = MessageDigest.getInstance("MD5");
        try (InputStream is = Files.newInputStream(Paths.get(filePathTwo))) {
          DigestInputStream dis = new DigestInputStream(is, md2);
          /* Read stream to EOF as normal... */
          while(dis.read()!= -1);
          dis.close();
        }
        byte[] digest2 = md2.digest();
        
        if (Arrays.equals(digest, digest2))
            return true;
        else
            return false;
    }
}
